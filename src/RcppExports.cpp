// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// split_parameter_x_condition
Rcpp::List split_parameter_x_condition(const Rcpp::CharacterVector& parameter_M_r);
RcppExport SEXP _ggdmcModel_split_parameter_x_condition(SEXP parameter_M_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type parameter_M_r(parameter_M_rSEXP);
    rcpp_result_gen = Rcpp::wrap(split_parameter_x_condition(parameter_M_r));
    return rcpp_result_gen;
END_RCPP
}
// is_core_parameter_x_condition
std::vector<bool> is_core_parameter_x_condition(const Rcpp::List& parameter_map_r, const Rcpp::List& factors_r);
RcppExport SEXP _ggdmcModel_is_core_parameter_x_condition(SEXP parameter_map_rSEXP, SEXP factors_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parameter_map_r(parameter_map_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type factors_r(factors_rSEXP);
    rcpp_result_gen = Rcpp::wrap(is_core_parameter_x_condition(parameter_map_r, factors_r));
    return rcpp_result_gen;
END_RCPP
}
// is_parameter_x_condition
std::vector<bool> is_parameter_x_condition(const Rcpp::List& parameter_map_r, const Rcpp::List& factors_r);
RcppExport SEXP _ggdmcModel_is_parameter_x_condition(SEXP parameter_map_rSEXP, SEXP factors_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parameter_map_r(parameter_map_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type factors_r(factors_rSEXP);
    rcpp_result_gen = Rcpp::wrap(is_parameter_x_condition(parameter_map_r, factors_r));
    return rcpp_result_gen;
END_RCPP
}
// get_stimulus_level_r
std::vector<std::string> get_stimulus_level_r(const Rcpp::List& parameter_map_r, const Rcpp::List& factors_r, const std::vector<std::string>& accumulators_r);
RcppExport SEXP _ggdmcModel_get_stimulus_level_r(SEXP parameter_map_rSEXP, SEXP factors_rSEXP, SEXP accumulators_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parameter_map_r(parameter_map_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type factors_r(factors_rSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type accumulators_r(accumulators_rSEXP);
    rcpp_result_gen = Rcpp::wrap(get_stimulus_level_r(parameter_map_r, factors_r, accumulators_r));
    return rcpp_result_gen;
END_RCPP
}
// get_factor_cells_r
Rcpp::List get_factor_cells_r(const Rcpp::List& parameter_map_r, const Rcpp::List& factors_r, const std::vector<std::string>& accumulators_r);
RcppExport SEXP _ggdmcModel_get_factor_cells_r(SEXP parameter_map_rSEXP, SEXP factors_rSEXP, SEXP accumulators_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parameter_map_r(parameter_map_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type factors_r(factors_rSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type accumulators_r(accumulators_rSEXP);
    rcpp_result_gen = Rcpp::wrap(get_factor_cells_r(parameter_map_r, factors_r, accumulators_r));
    return rcpp_result_gen;
END_RCPP
}
// table_parameters
Rcpp::List table_parameters(const Rcpp::S4& model_r, const Rcpp::NumericVector& parameters_r);
RcppExport SEXP _ggdmcModel_table_parameters(SEXP model_rSEXP, SEXP parameters_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type model_r(model_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type parameters_r(parameters_rSEXP);
    rcpp_result_gen = Rcpp::wrap(table_parameters(model_r, parameters_r));
    return rcpp_result_gen;
END_RCPP
}
// print_parameter_map
int print_parameter_map(const Rcpp::S4& model_r);
RcppExport SEXP _ggdmcModel_print_parameter_map(SEXP model_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type model_r(model_rSEXP);
    rcpp_result_gen = Rcpp::wrap(print_parameter_map(model_r));
    return rcpp_result_gen;
END_RCPP
}
// build_cell_names_r
Rcpp::List build_cell_names_r(const Rcpp::List& parameter_map_r, const Rcpp::List& factors_r, const std::vector<std::string>& responses_r);
RcppExport SEXP _ggdmcModel_build_cell_names_r(SEXP parameter_map_rSEXP, SEXP factors_rSEXP, SEXP responses_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parameter_map_r(parameter_map_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type factors_r(factors_rSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type responses_r(responses_rSEXP);
    rcpp_result_gen = Rcpp::wrap(build_cell_names_r(parameter_map_r, factors_r, responses_r));
    return rcpp_result_gen;
END_RCPP
}
// build_model_boolean_r
Rcpp::LogicalVector build_model_boolean_r(const Rcpp::List& parameter_map_r, const Rcpp::List& factors_r, const std::vector<std::string>& accumulators_r, const Rcpp::List& match_map_r);
RcppExport SEXP _ggdmcModel_build_model_boolean_r(SEXP parameter_map_rSEXP, SEXP factors_rSEXP, SEXP accumulators_rSEXP, SEXP match_map_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parameter_map_r(parameter_map_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type factors_r(factors_rSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type accumulators_r(accumulators_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type match_map_r(match_map_rSEXP);
    rcpp_result_gen = Rcpp::wrap(build_model_boolean_r(parameter_map_r, factors_r, accumulators_r, match_map_r));
    return rcpp_result_gen;
END_RCPP
}
// bind_condition2parameters_r
std::vector<std::string> bind_condition2parameters_r(const Rcpp::List& parameter_map_r, const Rcpp::List& factors_r);
RcppExport SEXP _ggdmcModel_bind_condition2parameters_r(SEXP parameter_map_rSEXP, SEXP factors_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parameter_map_r(parameter_map_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type factors_r(factors_rSEXP);
    rcpp_result_gen = Rcpp::wrap(bind_condition2parameters_r(parameter_map_r, factors_r));
    return rcpp_result_gen;
END_RCPP
}
// get_node_1_index_r
Rcpp::IntegerMatrix get_node_1_index_r(const Rcpp::List& parameter_map_r, const Rcpp::List& factors_r, const std::vector<std::string>& accumulators_r);
RcppExport SEXP _ggdmcModel_get_node_1_index_r(SEXP parameter_map_rSEXP, SEXP factors_rSEXP, SEXP accumulators_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type parameter_map_r(parameter_map_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type factors_r(factors_rSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type accumulators_r(accumulators_rSEXP);
    rcpp_result_gen = Rcpp::wrap(get_node_1_index_r(parameter_map_r, factors_r, accumulators_r));
    return rcpp_result_gen;
END_RCPP
}
// get_pnames
std::vector<std::string> get_pnames(const Rcpp::S4& model_r, bool debug);
RcppExport SEXP _ggdmcModel_get_pnames(SEXP model_rSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type model_r(model_rSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pnames(model_r, debug));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ggdmcModel_split_parameter_x_condition", (DL_FUNC) &_ggdmcModel_split_parameter_x_condition, 1},
    {"_ggdmcModel_is_core_parameter_x_condition", (DL_FUNC) &_ggdmcModel_is_core_parameter_x_condition, 2},
    {"_ggdmcModel_is_parameter_x_condition", (DL_FUNC) &_ggdmcModel_is_parameter_x_condition, 2},
    {"_ggdmcModel_get_stimulus_level_r", (DL_FUNC) &_ggdmcModel_get_stimulus_level_r, 3},
    {"_ggdmcModel_get_factor_cells_r", (DL_FUNC) &_ggdmcModel_get_factor_cells_r, 3},
    {"_ggdmcModel_table_parameters", (DL_FUNC) &_ggdmcModel_table_parameters, 2},
    {"_ggdmcModel_print_parameter_map", (DL_FUNC) &_ggdmcModel_print_parameter_map, 1},
    {"_ggdmcModel_build_cell_names_r", (DL_FUNC) &_ggdmcModel_build_cell_names_r, 3},
    {"_ggdmcModel_build_model_boolean_r", (DL_FUNC) &_ggdmcModel_build_model_boolean_r, 4},
    {"_ggdmcModel_bind_condition2parameters_r", (DL_FUNC) &_ggdmcModel_bind_condition2parameters_r, 2},
    {"_ggdmcModel_get_node_1_index_r", (DL_FUNC) &_ggdmcModel_get_node_1_index_r, 3},
    {"_ggdmcModel_get_pnames", (DL_FUNC) &_ggdmcModel_get_pnames, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ggdmcModel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
